package no.uio.taco.pukaMatControl.util;

import java.io.BufferedWriter;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;


/**
 * 
 * @author admin
 *
 */
class PhysionetImporter {
	
	/**
	 * Reads a ASCII text file generated by WFDB tools with the desired signal as the only
	 * selected channel. Time stamps are stripped away, leaving us with a straight forward signal
	 * in a one cloumn text file
	 * @param args
	 * @throws FileNotFoundException
	 * @throws UnsupportedEncodingException
	 * @throws IOException
	 */
	
	//TODO - change from main
	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException, IOException {
		File file = new File("raw.txt");

		FileOutputStream fo = new FileOutputStream("samples_cleaned.txt");
		Writer writer = new BufferedWriter(new OutputStreamWriter(fo, "utf-8"));

		Scanner input = new Scanner(file);
		String[] fromFile;
		ArrayList<Float> values = new ArrayList<>();
		ArrayList<Integer> errorIndexes = new ArrayList<>();

		int line = 0;

		
		while (input.hasNext()) {
			String nextLine = input.nextLine();
			fromFile = nextLine.trim().split("\\s+"); // TODO: find regex for < [time stamp] double >

			if (fromFile[2].equals("-")) {
				errorIndexes.add(line);
			}

			else {
				values.add(Float.parseFloat(fromFile[2]));
			}

			line++;

		}

		if (errorIndexes.size() > 0) {

			System.out.println("Fixing errors in signal");
			for (Integer e : errorIndexes) {
				try {
					float prev = values.get(e - 1);
					float next = values.get(e + 1);

					values.set(e, next + prev / 2);

				} catch (IndexOutOfBoundsException err) {
					values.set(e, 0f);
					System.out.println(err.fillInStackTrace() + "\n ***At index " + e + ". Can not calculate average");
				}
			}
		}

		for (Integer i : errorIndexes) {
			System.out.println(i);
		}
		for (Float v : values) {
			writer.append(v.toString() + "\n");
		}

		writer.close();
		input.close();
		System.out.println("Done, timestamps removed and missing entries averaged");
	}
}